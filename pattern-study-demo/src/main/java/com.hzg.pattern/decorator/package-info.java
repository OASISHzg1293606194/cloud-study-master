/**
 * @Package: com.hzg.pattern.decorator
 * @Description: 装饰器模式[Decorator Pattern](包装模式)[Wrapper Pattern]
 * @Author: HuangZhiGao
 * @CreateDate: 2021-11-08 13:47
 * 装饰器模式定义：<br/>
 * 指在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案(扩展原有对象的功能)<br/>
 * 透明的动态的扩展<br/>
 * 特征：属于结构模型模式<br/>
 * 适用场景：<br/>
 * <ol>
 * <li>用于扩展一个类的功能或给一个类添加附加职责</li>
 * <li>动态的给一个对象添加功能，这些功能可以再动态的撤销</li>
 * </ol>
 * <p/>
 * 装饰器模式与代理模式的对比：装饰器模式就是一种特殊的代理模式<br/>
 * 装饰器模式强调自身的功能扩展(透明、可动态定制的扩展)<br/>
 * 代理模式强调代理过程的控制<br/>
 * <p/>
 * 装饰器模式优点：<br/>
 * <ol>
 * <li>装饰器是继承的有力补充，比继承灵活，不改变原有对象的情况下动态的给一个对象扩展功能，即插即用</li>
 * <li>通过使用不同的装饰类以及这些类的排列组合，可以实现不同的效果</li>
 * <li>装饰器模式完全遵守开闭原则</li>
 * </ol>
 * <p/>
 * 装饰器模式缺点：<br/>
 * <ol>
 * <li>会出现更多的代码，更多的类，增加程序的复杂性</li>
 * <li>动态装饰时，多层装饰会更复杂</li>
 * </ol>
 */
package com.hzg.pattern.decorator;